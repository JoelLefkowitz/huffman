// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Tuple = require("../Data.Tuple/index.js");
var Huffman_Occurances = require("../Huffman.Occurances/index.js");
var Huffman_Symbol = require("../Huffman.Symbol/index.js");
var Huffman_Tree = require("../Huffman.Tree/index.js");
var Huffman_Weights = require("../Huffman.Weights/index.js");
var Codewords = function (x) {
    return x;
};
var showCodewords = new Data_Show.Show(function (v) {
    return Data_Show.show(Data_Map_Internal.showMap(Huffman_Symbol.showSymbol)(Data_Show.showString))(v);
});
var eqCodewords = new Data_Eq.Eq(function (v) {
    return function (v1) {
        return Data_Eq.eq(Data_Map_Internal.eqMap(Huffman_Symbol.eqSymbol)(Data_Eq.eqString))(v)(v1);
    };
});
var collapseTree = function (v) {
    return function (v1) {
        if (v instanceof Huffman_Tree.Leaf) {
            return [ new Data_Tuple.Tuple(v.value0, v1) ];
        };
        if (v instanceof Huffman_Tree.Node && v.value0.length === 2) {
            var yy = collapseTree(v["value0"][1])(v1 + "1");
            var xx = collapseTree(v["value0"][0])(v1 + "0");
            return Data_Array.concat([ xx, yy ]);
        };
        return [  ];
    };
};
var fromHuffmanTree = function (v) {
    if (v instanceof Huffman_Tree.Leaf) {
        return Codewords(Data_Map_Internal.singleton(v.value0)("0"));
    };
    if (v instanceof Huffman_Tree.Node && (v.value0.length === 1 && v["value0"][0] instanceof Huffman_Tree.Leaf)) {
        return Codewords(Data_Map_Internal.singleton(v["value0"][0].value0)("0"));
    };
    if (v instanceof Huffman_Tree.Node) {
        var codewords = collapseTree(new Huffman_Tree.Node(v.value0, v.value1))("");
        return Codewords(Data_Map_Internal.fromFoldable(Huffman_Symbol.ordSymbol)(Data_Foldable.foldableArray)(codewords));
    };
    throw new Error("Failed pattern match at Huffman.Codewords (line 28, column 1 - line 28, column 44): " + [ v.constructor.name ]);
};
var composeCodewords = function ($27) {
    return fromHuffmanTree(Huffman_Tree.fromWeights(Huffman_Weights.fromOccurances(Huffman_Occurances.countOccurances($27))));
};
module.exports = {
    Codewords: Codewords,
    composeCodewords: composeCodewords,
    fromHuffmanTree: fromHuffmanTree,
    collapseTree: collapseTree,
    eqCodewords: eqCodewords,
    showCodewords: showCodewords
};
