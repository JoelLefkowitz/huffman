// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map = require("../Data.Map/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Set = require("../Data.Set/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Common = require("../Data.String.Common/index.js");
var Data_String_Unsafe = require("../Data.String.Unsafe/index.js");
var Data_String_Utils = require("../Data.String.Utils/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Huffman_Symbol = require("../Huffman.Symbol/index.js");
var Utilities_Strings = require("../Utilities.Strings/index.js");
var encodeWith = function (str) {
    return function (v) {
        var symbols = Data_Functor.map(Data_Functor.functorArray)(function ($6) {
            return Huffman_Symbol["Symbol"](Data_String_Unsafe["char"]($6));
        })(Data_String_Common.split("")(str));
        var replace = function (acc) {
            return function (x) {
                return acc + Data_Maybe.fromMaybe("")(Data_Map_Internal.lookup(Huffman_Symbol.ordSymbol)(x)(v));
            };
        };
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(replace)("")(symbols);
    };
};
var decodeWith = function (str) {
    return function (v) {
        if (Data_String_CodeUnits.length(str) === 0) {
            return "";
        };
        if (Data_Boolean.otherwise) {
            var match = Data_Map_Internal.filter(Huffman_Symbol.ordSymbol)(function (i) {
                return Data_String_Utils.startsWith(i)(str);
            })(v);
            var symbol = Data_Maybe.fromMaybe("_")(Data_Array.head(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Map.keys(match))));
            var codeword = Data_Maybe.fromMaybe("")(Data_Map_Internal.lookup(Huffman_Symbol.ordSymbol)(symbol)(match));
            var remaining = Utilities_Strings.trimStart(codeword)(str);
            return Huffman_Symbol.toString(symbol) + decodeWith(remaining)(v);
        };
        throw new Error("Failed pattern match at Huffman.Encode (line 25, column 1 - line 25, column 44): " + [ str.constructor.name, v.constructor.name ]);
    };
};
module.exports = {
    encodeWith: encodeWith,
    decodeWith: decodeWith
};
