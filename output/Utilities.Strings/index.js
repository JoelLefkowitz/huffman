// Generated by purs version 0.13.8
"use strict";
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_String_CodePoints = require("../Data.String.CodePoints/index.js");
var Data_String_CodeUnits = require("../Data.String.CodeUnits/index.js");
var Data_String_Utils = require("../Data.String.Utils/index.js");
var trimStart = function (x) {
    return function (str) {
        if (x === str) {
            return "";
        };
        if (Data_String_Utils.startsWith(x)(str)) {
            return Data_Maybe.fromMaybe(str)(Data_String_CodeUnits.slice(Data_String_CodePoints.length(x))(Data_String_CodePoints.length(str))(str));
        };
        if (Data_Boolean.otherwise) {
            return str;
        };
        throw new Error("Failed pattern match at Utilities.Strings (line 16, column 1 - line 16, column 40): " + [ x.constructor.name, str.constructor.name ]);
    };
};
var trimEnd = function (x) {
    return function (str) {
        if (x === str) {
            return "";
        };
        if (Data_String_Utils.endsWith(x)(str)) {
            return Data_Maybe.fromMaybe(str)(Data_String_CodeUnits.slice(0)(Data_String_CodePoints.length(str) - Data_String_CodePoints.length(x) | 0)(str));
        };
        if (Data_Boolean.otherwise) {
            return str;
        };
        throw new Error("Failed pattern match at Utilities.Strings (line 10, column 1 - line 10, column 38): " + [ x.constructor.name, str.constructor.name ]);
    };
};
var joinWith = function (dictShow) {
    return function (dictFoldable) {
        return function (delimeter) {
            return function (foldable) {
                var joined = Data_Foldable.foldl(dictFoldable)(function (acc) {
                    return function (x) {
                        return acc + (Data_Show.show(dictShow)(x) + delimeter);
                    };
                })("")(foldable);
                return trimEnd(delimeter)(joined);
            };
        };
    };
};
module.exports = {
    trimEnd: trimEnd,
    trimStart: trimStart,
    joinWith: joinWith
};
