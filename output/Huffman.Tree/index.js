// Generated by purs version 0.13.8
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Map_Internal = require("../Data.Map.Internal/index.js");
var Data_Ord = require("../Data.Ord/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Unfoldable = require("../Data.Unfoldable/index.js");
var Huffman_Symbol = require("../Huffman.Symbol/index.js");
var Utilities_Strings = require("../Utilities.Strings/index.js");
var Node = (function () {
    function Node(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Node.create = function (value0) {
        return function (value1) {
            return new Node(value0, value1);
        };
    };
    return Node;
})();
var Leaf = (function () {
    function Leaf(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Leaf.create = function (value0) {
        return function (value1) {
            return new Leaf(value0, value1);
        };
    };
    return Leaf;
})();
var weight = function (v) {
    if (v instanceof Node) {
        return v.value1;
    };
    if (v instanceof Leaf) {
        return v.value1;
    };
    throw new Error("Failed pattern match at Huffman.Tree (line 27, column 1 - line 27, column 32): " + [ v.constructor.name ]);
};
var sum = function (arr) {
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (acc) {
        return function (x) {
            return acc + weight(x);
        };
    })(0.0)(arr);
};
var showHuffmanTree = new Data_Show.Show(function (v) {
    if (v instanceof Node) {
        return "[" + (Utilities_Strings.joinWith(showHuffmanTree)(Data_Foldable.foldableArray)(", ")(v.value0) + ("]: " + Data_Show.show(Data_Show.showNumber)(v.value1)));
    };
    if (v instanceof Leaf) {
        return Data_Show.show(Huffman_Symbol.showSymbol)(v.value0) + (": " + Data_Show.show(Data_Show.showNumber)(v.value1));
    };
    throw new Error("Failed pattern match at Huffman.Tree (line 23, column 1 - line 25, column 45): " + [ v.constructor.name ]);
});
var eqHuffmanTree = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof Node && v1 instanceof Node) {
            return Data_Eq.eq(Data_Eq.eqArray(eqHuffmanTree))(v.value0)(v1.value0) && v.value1 === v1.value1;
        };
        if (v instanceof Leaf && v1 instanceof Leaf) {
            return Data_Eq.eq(Huffman_Symbol.eqSymbol)(v.value0)(v1.value0) && v.value1 === v1.value1;
        };
        return false;
    };
});
var ordHuffmanTree = new Data_Ord.Ord(function () {
    return eqHuffmanTree;
}, function (x) {
    return function (y) {
        return Data_Ord.compare(Data_Ord.ordNumber)(weight(x))(weight(y));
    };
});
var joinTree = function (v) {
    if (v instanceof Leaf) {
        return new Leaf(v.value0, v.value1);
    };
    if (v instanceof Node) {
        if (Data_Array.length(v.value0) <= 2) {
            return new Node(v.value0, v.value1);
        };
        if (Data_Boolean.otherwise) {
            var untouched = Data_Array.slice(2)(Data_Array.length(v.value0))(Data_Array.sort(ordHuffmanTree)(v.value0));
            var pair = Data_Array.slice(0)(2)(Data_Array.sort(ordHuffmanTree)(v.value0));
            var newNode = new Node(pair, sum(pair));
            return joinTree(new Node(Data_Array.insert(ordHuffmanTree)(joinTree(newNode))(untouched), v.value1));
        };
    };
    throw new Error("Failed pattern match at Huffman.Tree (line 40, column 1 - line 40, column 39): " + [ v.constructor.name ]);
};
var fromWeights = function (v) {
    var leaves = Data_Functor.map(Data_Functor.functorArray)(function (v1) {
        return new Leaf(v1.value0, v1.value1);
    })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v));
    return joinTree(new Node(leaves, 1.0));
};
module.exports = {
    Node: Node,
    Leaf: Leaf,
    weight: weight,
    sum: sum,
    fromWeights: fromWeights,
    joinTree: joinTree,
    eqHuffmanTree: eqHuffmanTree,
    ordHuffmanTree: ordHuffmanTree,
    showHuffmanTree: showHuffmanTree
};
